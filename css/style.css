/*
* Landing Page - Practice
* CSS Styles
* http://www.idg.net.ua/blog/uchebnik-css/ispolzovanie-css/praktika-delaem-landing-page
*
*/




/* -----------------------------General (Основные стили CSS)------------------ */
/*Начнем с основного текста на сайте. Согласно дизайну макета, основной (и единственный) шрифт на странице — это Raleway, а все параграфы <p> должны иметь размер шрифта 14 пикселей, цвет #999 и высоту строки 1.6. Запишем эти данные в нашу таблицу стилей, в раздел General:*/

body {
    font-family: Raleway, Arial, Helvetica, sans-serif; /*кроме Raleaway добавим запасных шрифтов*/
}

p {
    font-size: 14px;
    color: #999;
    line-height: 1.6;
}

img {
    display: block;
    max-width: 100%;
    height: auto;
}


/*Двигаемся дальше: нужны стили для заголовков. У нас есть один заголовок <h1>, а также несколько заголовков <h2> и <h3>. Согласно макету, заголовок h1 имеет размер шрифта 40 пикселей и белый цвет. Остальные заголовки имеют цвет #282828. Размер шрифта для заголовков второго уровня — 28 пикселей, а для h3 — 26 пикселей.*/

h1 {
    font-size: 40px;
    color: #fff;
}

h2 {
    font-size: 28px;
}

h3 {
    font-size: 26px;
}

h2, h3 {
    color: #282828;
}

/*Помимо текста у нас есть еще несколько повторяющихся элементов. Например, класс .container — это блок, с ограниченной шириной в который помещается контент. Ширина нашего контента должна занимать 90% экрана, но при этом контейнер не должен растягиваться шире, чем 960 пикселей. Здесь нам пригодится недавно рассмотренное свойство max-width. Кроме того, этот контейнер должен размещаться по центру страницы, для чего мы воспользуемся свойством margin.*/

.container {
    width: 90%;
    max-width: 960px;
    margin-left: auto;
    margin-right: auto;
}

/* Следующие повторяющиеся элементы — блок с классом .brand и навигационное меню. Эти элементы присутствуют в хедере и футере. Они не будут выглядеть абсолютно идентично, однако часть стилей для них будут общими.

Итак, оба элемента .brand будут иметь одинаковый размер шрифта:*/

.brand {
    font-size: 30px;
}
/* A оба навигационных меню будут горизонтальными и тоже будут иметь одинаковый размер шрифта. Кстати, для создания горизонтального меню мы задействуем свойство float, применив его к пунктам меню:*/
.menu li {
    float: left;
    font-size: 16px;
    list-style: none; /*убираем стандартные маркеры списка*/
}

.menu {
    padding-left: 0; /*убираем стандартный левый отступ списка*/
    margin: 0; /*убираем стандартные поля списка*/
}

/*Уберем из навигации стандартное подчеркивание ссылок:*/
.menu li a {
    text-decoration: none;
}

/* ----------------------------Header (CSS для шапки сайта)-------------- */

/*Наш хедер будет иметь белый фон и отступ сверху в размере 30 пикселей. Запишем это в таблицу стилей:*/

header {
    background-color: #fff;
    padding-top: 30px;
}

/*Блок с названием проекта будет прилеплен к левой стороне контейнера, иметь цвет #59abe3 и отступ внизу в 30 пикселей:*/

header .brand {
    float: left;
    color: #59abe3;
    margin-bottom: 30px;
}

/*Обратите внимание, что мы записали стиль именно для того элемента .brand, который находится в шапке сайта, и не затрагивали .brand, расположенный в футере, поскольку он будет иметь другой цвет и расположение. В дальнейшем мы будем продолжать использовать преимущества селекторов потомков.

Навигационное меню мы приклеим к правой стороне шапки, добавим внизу поле высотой 30 пикселей, а также сделаем отступы по 20 пикселей слева для всех пунктов меню, чтобы они не сливались в одно целое:*/

header .menu {
    float: right;
    margin-bottom: 30px;
}

header .menu li {
    padding-left: 20px;
}

/*Установим цвет текста #aaa для пунктов меню. Этот стиль мы применим именно к тегам <a>, а не к <li>, в противном случае мы не увидим результат. Дело в том, что тег <a> не наследует цвет текста от родителя, и ссылки продолжат отображаться в стандартном синем цвете.*/

header .menu li a{
    color: #aaa;
}

/*Как правило, jumbotron (джамботрон) на сайте — это большой, привлекающий внимание блок, растянутый на всю ширину страницы. Фоном для нашего джамботрона послужит изображение в хорошем качестве, растянутое на всю ширину, а текстовое содержимое будет находиться в ограничивающем блоке .container.

Добавим еще несколько строк к стилю джамботрона — для создания вертикальных отступов по 80 пикселей и установки минимальной высоты в 250 пикселей, для выравнивания внутреннего содержимого по центру блока, а также для сброса обтекания, которое было задано навигационному меню:*/

.jumbotron {
    background-image: url(https://img5.goodfon.ru/original/1920x1080/5/12/peizazh-priroda-krasota-kamni-ozero-riab-trava.jpg);
    background-size: cover;
    background-position: top center;
    background-repeat: no-repeat;
    padding-top: 80px;
    padding-bottom: 80px;
    min-height: 250px;
    text-align: center;
    clear: both;
}


/* Поскольку тег <a> является строчным элементом, то первым делом применим к нему свойство display со значением inline-block. Таким образом кнопка будет отображаться как блок, а поведение останется, как у строки.

Текст кнопки будет белым и без подчеркивания, шрифт — жирный 18 пикселей, верхний margin — 40 пикселей, а цвет фона — #22a7f0. Чтобы это больше было похоже на кнопку, необходимо добавить отступы с четырех сторон — в нашем случае по 20 пикселей вертикально и по 30 пикселей горизонтально. Также мы округлим углы элемента с помощью уже известного нам свойства border-radius:*/

.jumbotron .button {
    display: inline-block;
    color: #fff;
    text-decoration: none;
    font-weight: bold;
    font-size: 18px;
    margin-top: 40px;
    background-color: #fa5ba5;
    padding: 20px 50px;
    border-radius: 30px;
    box-shadow: 3px 4px 5px #971b55;
}


/* ---------------------------Services----------------------------------- */

/*Данная секция будет включать в себя три блока, расположенных в один ряд. В этом нам снова поможет свойство float. Все блоки будут иметь одинаковую ширину, указанную в процентах, и в сумме они займут всю ширину контейнера. Разделив число 100 на 3, получаем 33,333333. Именно его мы записываем в стиль для класса .service. Дополнительно зададим каждому блоку внутренние отступы в размере 15 пикселей и внешние вертикальные отступы в 30 и 50 пикселей:*/

/*Мы добавили нашим блокам свойство padding, и сумма их ширин превысила ширину контейнера, поэтому один из них не помещается в ряд. Добавьте к стилю элемента .service свойство box-sizing со значением border-box, после чего обновите страницу в браузере. Вы увидите, что теперь все блоки выстроились так, как надо.*/

.services .service {
    width: 33.333333%;
    float: left;
    padding-left: 15px;
    padding-right: 15px;
    margin-top: 30px;
    margin-bottom: 50px;
    box-sizing: border-box;
}

/*Добавим стили для самого блока .services — сделаем верхний отступ в 50 пикселей и центрируем всё текстовое содержимое:*/

.services {
    padding-top: 50px;
    text-align: center;
}

/*В качестве иконок блоков мы использовали иконочный шрифт FontAwesome. Мы не будем углубляться в эту тему (на официальном сайте FontAwesome есть очень простая и понятная инструкция по использованию), но мы изменим цвет иконок на более подходящий нам. Каждая иконка представляет собой векторный рисунок, перекрасить который не составит труда. Мы просто запишем стиль, как будто задаем цвет для текста:*/

.services .fa {
    color:#979797;
    margin-bottom: 15px; /* добавим небольшой отступ*/
}
/* -----------------------Blog (CSS для блока Blog)---------------------- */

/*Прежде всего необходимо отменить обтекание для блока .blog. Он будет иметь вертикальные внутренние отступы в 50 пикселей, а также легкий серый фон, в соответствии с макетом:*/

.blog {
    clear: both;
    padding-top: 50px;
    padding-bottom: 50px;
    background-color: #fcfcfc;
}

/*Выровняем заголовок этого блока по центру:*/
.blog h2 {
    text-align: center;
}

/*Каждому блоку с классом .post присвоим внутренний отступ в 30 пикселей сверху и поведение строчно-блочного элемента:*/
.blog .post {
    padding-top: 30px;
    display: inline-block;
}

/*Для миниатюр постов зададим обтекание и внешний отступ 30 пикселей с правой стороны:*/
.blog .post img {
    float: left;
    margin-right: 30px;
}



/* -----------------------Footer (CSS для футера)--------------------------- */

/*Для основного блока подвала понадобится сбросить обтекание, задать вертикальные отступы в 50 пикселей, выравнивание текста по центру и темно-серый фон:*/

footer {
    clear: both;
    padding-top: 50px;
    padding-bottom: 50px;
    text-align: center;
    background-color: #38404b;
}

/*Установим цвет текста для элемента .brand (как уже упоминалось, он будет отличаться от стиля, применяемого к элементу .brand в шапке сайта):*/

footer .brand {
    color: #bcc9dd
}

/*Для пунктов меню в футере зададим отступы и цвет ссылок:*/

footer .menu li {
    padding-left: 10px;
    padding-right: 10px;
}

footer .menu li a {
    color: #bcc9dd
}
/*Обратите внимание: чтобы свойство text-align:center, примененное к тегу <footer>, повлияло на блок с меню, необходимо сделать его строчно-блочным:*/
footer .menu {
    display: inline-block;
    margin-top: 30px /*так же добавим отступы*/;
    margin-bottom: 15px;
}

/*И, наконец, напишем небольшой стиль для последнего элемента — .copyright:*/

footer .copyright {
    font-size: 12px;
    color: #eee
}

/*Итак, наши блоки начинают выглядеть плохо на экранах шириной менее 576 пикселей (в основном, это телефоны в портретной ориентации). Запишем специальный стиль для данной ширины (поместите эту запись в самый низ таблицы стилей):*/

@media (max-width: 575px) {
    .services .service {
        width: 100%;
        float: none;
    }
    .blog .post img {
        float: none;
        display: block;
        margin-left: auto;
        margin-right: auto;
    }
    .blog .post {
        max-width: 280px;
        margin-left: auto;
        margin-right: auto;
        display: block;
    }
}
/*Продолжаем проверять нашу верстку на адаптивность. Отчетливо видно, что на маленькие экраны нормально не помещаются блоки .post. Миниатюра поста чересчур большая для небольшого экрана и следующий за ней текст некрасиво обтекает ее. Исправим это следующим стилем (просто добавьте код к уже созданному медиазапросу):*/


/*Напоследок добавим еще пару строк кода, которые помогут всем изображениям на странице стать адаптивными. Внимание: этот стиль добавляем в раздел General!

img {
    display: block;
    max-width: 100%;
    height: auto;
}*/